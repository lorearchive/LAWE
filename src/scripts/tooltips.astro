<script>
    import { computePosition, flip, shift, offset, arrow } from '@floating-ui/dom';

    const tooltip = document.getElementById('fnTooltip');
    const fnLinks = document.querySelectorAll('.footnote-link');

    if (tooltip && fnLinks.length > 0) {
        let hideTimeout: ReturnType<typeof setTimeout> | null = null;

        const showTooltip = async (e: Event) => {
            // Clear any pending hide timeout
            if (hideTimeout) {
                clearTimeout(hideTimeout);
                hideTimeout = null;
            }

            if (!e.target || !(e.target instanceof HTMLElement)) return;
            
            const href = e.target.getAttribute('href');
            if (!href) return;
            
            const fnElement = document.getElementById(href.substring(1));
            if (!fnElement) return;
            
            const contentElement = fnElement.querySelector('.footnote-content');
            if (!contentElement) return;
            
            const arrowElement = document.getElementById('tooltip-arrow');
            if (!arrowElement) return;
            
            // Put content in the content div
            const tooltipContent = tooltip.querySelector('.tooltip-content');
            if (tooltipContent) {
                tooltipContent.innerHTML = contentElement.innerHTML.replace(/^\d+\.\s*<a[^>]*>.*?<\/a>\s*/, '');
            }
            
            tooltip.classList.add('show');        

            computePosition(e.target, tooltip, {
                placement: 'top-start',
                middleware: [offset(8), flip(), shift({ padding: 8 }), arrow({ element: arrowElement, padding: 12 })]
            }).then(({x, y, placement, middlewareData}) => {
                Object.assign(tooltip.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
                
                // Position arrow using middlewareData.arrow
                const arrowData = middlewareData.arrow;
                if (arrowData) {
                    const { x: arrowX, y: arrowY } = arrowData;
                    
                    Object.assign(arrowElement.style, {
                        left: arrowX != null ? `${arrowX}px` : '',
                        top: arrowY != null ? `${arrowY}px` : '',
                    });
                    
                    // Set arrow direction based on placement
                    const side = placement.split('-')[0];
                    const staticSide: Record<string, string> = {
                        top: 'bottom',
                        right: 'left', 
                        bottom: 'top',
                        left: 'right',
                    };

                    if (staticSide[side]) {
                        const cssProperty = staticSide[side] as 'top' | 'right' | 'bottom' | 'left';
                        if (cssProperty) {
                            arrowElement.style[cssProperty] = '-4px';
                        }
                    }
                }
            }).catch(error => {
                console.warn('Tooltip positioning failed:', error); 
                tooltip.classList.remove('show');
            });
        };

        // Function to hide tooltip with delay
        const hideTooltip = () => {
            hideTimeout = setTimeout(() => {
                tooltip.classList.remove('show');
            }, 150); // Small delay to allow moving to tooltip
        };

        // Function to keep tooltip visible
        const keepTooltipVisible = () => {
            if (hideTimeout) {
                clearTimeout(hideTimeout);
                hideTimeout = null;
            }
        };

        // Add listeners to footnote links
        fnLinks.forEach(link => {
            link.addEventListener('mouseenter', showTooltip);
            link.addEventListener('mouseleave', hideTooltip);
        });

        // Add listeners to tooltip itself
        tooltip.addEventListener('mouseenter', keepTooltipVisible);
        tooltip.addEventListener('mouseleave', hideTooltip);
    }
</script>